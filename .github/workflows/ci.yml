name: CI - build & smoke

on:
  push:
    branches: [ main, master ]
    # only run workflow on version tags starting with 'v' (e.g. v1.2.0)
    tags: ['v*']
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-smoke:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Create venv and install deps
        run: |
          python3 -m venv venv
          ./venv/bin/python -m pip install --upgrade pip setuptools wheel
          ./venv/bin/pip install -r requirements.txt

      - name: Run in-source smoke test
        run: |
          mkdir -p dist
          THE_EXAMPLE_SMOKE=1 THE_EXAMPLE_SMOKE_OUT=dist/smoke_in_source.json ./venv/bin/python main.py
        continue-on-error: false

      - name: Build testing bundle (no pruning)
        run: |
          rm -rf build dist
          ./venv/bin/python setup.py py2app

      - name: Run smoke test against testing bundle
        run: |
          THE_EXAMPLE_SMOKE=1 THE_EXAMPLE_SMOKE_OUT=$(pwd)/dist/smoke.json dist/The\ Example.app/Contents/MacOS/The\ Example

      - name: Build pruned release bundle (moderate)
        run: |
          rm -rf build dist
          PRUNE_BUNDLE=1 PRUNE_LEVEL=moderate ./venv/bin/python setup.py py2app

      - name: Run smoke test against pruned bundle
        run: |
          THE_EXAMPLE_SMOKE=1 THE_EXAMPLE_SMOKE_OUT=$(pwd)/dist/smoke_pruned.json dist/The\ Example.app/Contents/MacOS/The\ Example

      - name: Zip pruned .app
        run: |
          cd dist
          # create reproducible zip (quiet, recurse, preserve symlinks)
          zip -qry The-Example-macos-pruned.zip "The Example.app"
          ls -lah The-Example-macos-pruned.zip

      - name: Generate sha256 checksum
        run: |
          cd dist
          # use shasum on macOS
          shasum -a 256 The-Example-macos-pruned.zip | awk '{print $1 "  " $2}' > The-Example-macos-pruned.zip.sha256
          echo 'SHA256:'
          cat The-Example-macos-pruned.zip.sha256

      - name: Upload pruned artifact (zip + checksum)
        uses: actions/upload-artifact@v4
        with:
          name: The-Example-macos-pruned
          path: |
            dist/The-Example-macos-pruned.zip
            dist/The-Example-macos-pruned.zip.sha256


      - name: Create GitHub release
        if: startsWith(github.ref_name, 'v')
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: 'Pruned macOS build ${{ github.ref_name }}'
          body: 'Pruned macOS build generated by CI.'
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Annotate release with checksum
        if: startsWith(github.ref_name, 'v')
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = 'dist/The-Example-macos-pruned.zip.sha256';
            const checksum = fs.existsSync(path) ? fs.readFileSync(path, 'utf8').trim() : 'missing';
            const release_id = parseInt(`${{ steps.create_release.outputs.id }}`, 10);
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id,
              body: `Pruned macOS build generated by CI.\nsha256 checksum:\n${checksum}`
            });

      - name: Upload zip to GitHub Release
        if: startsWith(github.ref_name, 'v')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/The-Example-macos-pruned.zip
          asset_name: The-Example-macos-pruned.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload checksum to GitHub Release
        if: startsWith(github.ref_name, 'v')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/The-Example-macos-pruned.zip.sha256
          asset_name: The-Example-macos-pruned.zip.sha256
          asset_content_type: text/plain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
